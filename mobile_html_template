<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cookbook Recipe Extractor</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            margin: 0;
            padding: 16px;
            max-width: 600px;
            margin: 0 auto;
            color: #333;
        }
        h1 {
            font-size: 1.8rem;
            margin-bottom: 16px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        input[type="text"], input[type="password"] {
            width: 100%;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #ddd;
            box-sizing: border-box;
            font-size: 16px; /* Prevents zoom on iOS */
        }
        .file-area {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            margin-bottom: 20px;
            position: relative;
        }
        .file-area input[type="file"] {
            position: relative;
            z-index: 2;
            opacity: 0;
            width: 100%;
            height: 100%;
        }
        .file-area .file-dummy {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            z-index: 1;
        }
        button {
            background-color: #007AFF;
            color: white;
            padding: 14px;
            border: none;
            border-radius: A8px;
            width: 100%;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
        }
        .checkbox-container {
            display: flex;
            align-items: center;
        }
        .checkbox-container input {
            margin-right: 10px;
            width: 20px;
            height: 20px;
        }
        .checkbox-container label {
            display: inline;
            margin-bottom: 0;
        }
        #status {
            margin-top: 20px;
            padding: 16px;
            border-radius: 8px;
            display: none;
        }
        .success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        .progress {
            background-color: #fff3cd;
            border: 1px solid #ffeeba;
            color: #856404;
        }
        #thumbnails {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }
        .thumbnail {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
            border: 1px solid #ddd;
        }
        .download-btn {
            background-color: #28a745;
            margin-top: 10px;
            display: none;
        }
    </style>
</head>
<body>
    <h1>Cookbook Recipe Extractor</h1>
    
    <form id="uploadForm">
        <div class="form-group">
            <label for="cookbook_name">Cookbook Name:</label>
            <input type="text" id="cookbook_name" name="cookbook_name" placeholder="Enter cookbook name" required>
        </div>
        
        <div class="form-group">
            <label for="api_key">OpenAI API Key:</label>
            <input type="password" id="api_key" name="api_key" placeholder="Enter your API key" required>
        </div>
        
        <div class="form-group">
            <div class="file-area">
                <div class="file-dummy">
                    <p>Tap to take photos or select from gallery</p>
                    <p><small>JPG, PNG files only</small></p>
                </div>
                <input type="file" id="files" name="files" multiple accept="image/*" capture="environment" required>
            </div>
            <div id="thumbnails"></div>
        </div>
        
        <div class="form-group checkbox-container">
            <input type="checkbox" id="enhance" name="enhance" value="true" checked>
            <label for="enhance">Enhance photos for better results</label>
        </div>
        
        <button type="submit" id="submitBtn">Extract Recipes</button>
    </form>
    
    <div id="status" class="progress"></div>
    <button id="downloadBtn" class="download-btn">Download Recipe Files</button>
    
    <script>
        let currentJobId = null;
        
        document.getElementById('uploadForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const statusDiv = document.getElementById('status');
            const submitBtn = document.getElementById('submitBtn');
            const downloadBtn = document.getElementById('downloadBtn');
            
            // Reset and show status
            statusDiv.className = 'progress';
            statusDiv.textContent = 'Uploading images...';
            statusDiv.style.display = 'block';
            downloadBtn.style.display = 'none';
            submitBtn.disabled = true;
            
            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    statusDiv.className = 'error';
                    statusDiv.textContent = data.error || 'Upload failed';
                    submitBtn.disabled = false;
                    return;
                }
                
                // Start polling for job status
                currentJobId = data.job_id;
                statusDiv.textContent = data.message;
                
                pollJobStatus(currentJobId);
                
            } catch (error) {
                statusDiv.className = 'error';
                statusDiv.textContent = 'Error: ' + error.message;
                submitBtn.disabled = false;
            }
        });
        
        async function pollJobStatus(jobId) {
            const statusDiv = document.getElementById('status');
            const submitBtn = document.getElementById('submitBtn');
            const downloadBtn = document.getElementById('downloadBtn');
            
            try {
                const response = await fetch(`/status/${jobId}`);
                const data = await response.json();
                
                if (!response.ok) {
                    statusDiv.className = 'error';
                    statusDiv.textContent = 'Failed to get job status';
                    submitBtn.disabled = false;
                    return;
                }
                
                if (data.status === 'completed') {
                    statusDiv.className = 'success';
                    statusDiv.textContent = data.message || 'Processing completed!';
                    submitBtn.disabled = false;
                    
                    // Show download button
                    downloadBtn.style.display = 'block';
                    downloadBtn.addEventListener('click', function() {
                        window.location.href = `/download/${jobId}`;
                    });
                    
                } else if (data.status === 'failed') {
                    statusDiv.className = 'error';
                    statusDiv.textContent = 'Processing failed: ' + (data.message || 'Unknown error');
                    submitBtn.disabled = false;
                } else {
                    // Still processing, continue polling
                    statusDiv.className = 'progress';
                    statusDiv.textContent = data.message || 'Processing...';
                    setTimeout(() => pollJobStatus(jobId), 2000);
                }
                
            } catch (error) {
                statusDiv.className = 'error';
                statusDiv.textContent = 'Error checking status: ' + error.message;
                submitBtn.disabled = false;
            }
        }
        
        // Show thumbnails of selected images
        document.getElementById('files').addEventListener('change', function() {
            const thumbnailsDiv = document.getElementById('thumbnails');
            thumbnailsDiv.innerHTML = '';
            
            for (const file of this.files) {
                if (file.type.match('image.*')) {
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.className = 'thumbnail';
                        thumbnailsDiv.appendChild(img);
                    };
                    
                    reader.readAsDataURL(file);
                }
            }
        });
    </script>
</body>
</html>
</antA